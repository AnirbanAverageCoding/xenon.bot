from sanic import response
import msgpack
from datetime import datetime, timedelta

import helpers


API_ENDPOINT = "https://discordapp.com/api"


class AuthUser:
    def __init__(self, user_id, admin=False):
        self.id = user_id
        self.admin = admin


class OAuthMixin:
    async def oauth_request(self, method, endpoint, *, token, **kwargs):
        async with self.session.request(
                method=method,
                url=API_ENDPOINT + endpoint,
                headers={"Authorization": f"Bearer {token}"},
                **kwargs
        ) as resp:
            resp.raise_for_status()
            return await helpers.json_or_text(resp)

    def oauth_user(self, *, token):
        return self.oauth_request("GET", "/users/@me", token=token)

    async def store_oauth(self, user_id, tokens):
        expires_in = tokens.pop("expires_in")

        # expires_at is not very useful without a reference point
        # store a expire_at timestamp instead
        expires_at = datetime.utcnow() + timedelta(seconds=expires_in)
        tokens["expires_at"] = expires_at.timestamp()

        await self.redis.setex(f"oauth_{user_id}", expires_in, msgpack.packb(tokens))

    async def get_oauth(self, user_id):
        data = await self.redis.get(f"oauth_{user_id}")
        if data is None:
            return None

        return msgpack.unpackb(data)

    async def delete_oauth(self, user_id):
        await self.redis.delete(f"oauth_{user_id}")


def requires_token(admin=False):
    def predicate(handler):
        async def wrapper(request, *args, **kwargs):
            token = request.headers.get("Authorization")
            if token is None:
                return response.json({"error": "Unauthorized"}, status=401)

            try:
                token_data = helpers.decode_jwt(request.app, token)
            except helpers.jwt.DecodeError:
                return response.json({"error": "Invalid Token"}, status=401)

            # Tokens can only be generated by the application, so user_id is safe to get this way
            user_id = token_data["user_id"]
            user = AuthUser(user_id)
            if admin and not user.admin:
                return response.json({"error": "Admin privileges required"}, status=401)

            return await handler(request, user, *args, **kwargs)

        return wrapper

    return predicate
